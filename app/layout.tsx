import PageLinkSelector from './components/PageLinkSelector'; // Adjust path
import fs from 'fs';
import path from 'path';
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Define the shape of the page link object
type PageLink = {
  name: string;
  path: string;
};

// This server-side function reads your `app` directory to find all pages.
const getPageRoutes = (): PageLink[] => {
  const appDir = path.join(process.cwd(), 'app');
  const routes: PageLink[] = [];

  function findPages(directory: string) {
    try {
      const items = fs.readdirSync(directory, { withFileTypes: true });

      for (const item of items) {
        const fullPath = path.join(directory, item.name);
        if (item.isDirectory()) {
          // Skip API folders and private folders (like those starting with '_')
          if (item.name.startsWith('api') || item.name.startsWith('_')) {
            continue;
          }

          // If a 'page.tsx' exists, it's a public route.
          if (fs.existsSync(path.join(fullPath, 'page.tsx'))) {
            // Create a clean URL path from the file path
            const routePath = fullPath
              .replace(appDir, '')
              .replace(/\\/g, '/') // Handle Windows paths
              .replace(/\/\(.*\)/g, ''); // Exclude route groups like `/(marketing)`

            // Create a user-friendly name from the folder name
            const routeName = item.name
              .replace(/-/g, ' ')
              .replace(/\b\w/g, char => char.toUpperCase());

            routes.push({ name: routeName, path: routePath || '/' });
          }
          findPages(fullPath); // Recurse into subdirectories
        }
      }
    } catch (error) {
        console.error("Error reading directory:", directory, error);
    }
  }

  // Handle the root page (`app/page.tsx`) separately
  if (fs.existsSync(path.join(appDir, 'page.tsx'))) {
    routes.push({ name: 'Home', path: '/' });
  }

  findPages(appDir);

  // Remove duplicates and sort for a clean, consistent list
  const uniqueRoutes = Array.from(new Map(routes.map(r => [r.path, r])).values());
  uniqueRoutes.sort((a, b) => a.name.localeCompare(b.name));

  return uniqueRoutes;
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  
  // 1. Get the list of pages on the server
  const pageRoutes = getPageRoutes();

  return (
    <html lang="en">
      <body className="bg-gray-50">
        <header className="bg-white shadow-sm">
          <nav className="container mx-auto p-4 flex justify-between items-center">
            <h1 className="font-bold text-xl">My App</h1>
            <PageLinkSelector pages={pageRoutes} placeholder="Navigate to..." />
          </nav>
        </header>
        <main className="p-4">{children}
        </main>
      </body>
    </html>
  );
}
